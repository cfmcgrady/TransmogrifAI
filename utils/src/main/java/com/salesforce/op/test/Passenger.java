/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.salesforce.op.test;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Passenger extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Passenger\",\"namespace\":\"com.salesforce.op.test\",\"fields\":[{\"name\":\"passengerId\",\"type\":[\"int\",\"null\"]},{\"name\":\"age\",\"type\":[\"int\",\"null\"]},{\"name\":\"gender\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"height\",\"type\":[\"int\",\"null\"]},{\"name\":\"weight\",\"type\":[\"int\",\"null\"]},{\"name\":\"description\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"survived\",\"type\":[\"int\",\"null\"]},{\"name\":\"boarded\",\"type\":[\"int\",\"null\"]},{\"name\":\"recordDate\",\"type\":[\"int\",\"null\"]},{\"name\":\"stringMap\",\"type\":[{\"type\":\"map\",\"values\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"numericMap\",\"type\":[{\"type\":\"map\",\"values\":\"double\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"booleanMap\",\"type\":[{\"type\":\"map\",\"values\":\"boolean\",\"avro.java.string\":\"String\"},\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Integer passengerId;
  @Deprecated public java.lang.Integer age;
  @Deprecated public java.lang.String gender;
  @Deprecated public java.lang.Integer height;
  @Deprecated public java.lang.Integer weight;
  @Deprecated public java.lang.String description;
  @Deprecated public java.lang.Integer survived;
  @Deprecated public java.lang.Integer boarded;
  @Deprecated public java.lang.Integer recordDate;
  @Deprecated public java.util.Map<java.lang.String,java.lang.String> stringMap;
  @Deprecated public java.util.Map<java.lang.String,java.lang.Double> numericMap;
  @Deprecated public java.util.Map<java.lang.String,java.lang.Boolean> booleanMap;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Passenger() {}

  /**
   * All-args constructor.
   */
  public Passenger(java.lang.Integer passengerId, java.lang.Integer age, java.lang.String gender, java.lang.Integer height, java.lang.Integer weight, java.lang.String description, java.lang.Integer survived, java.lang.Integer boarded, java.lang.Integer recordDate, java.util.Map<java.lang.String,java.lang.String> stringMap, java.util.Map<java.lang.String,java.lang.Double> numericMap, java.util.Map<java.lang.String,java.lang.Boolean> booleanMap) {
    this.passengerId = passengerId;
    this.age = age;
    this.gender = gender;
    this.height = height;
    this.weight = weight;
    this.description = description;
    this.survived = survived;
    this.boarded = boarded;
    this.recordDate = recordDate;
    this.stringMap = stringMap;
    this.numericMap = numericMap;
    this.booleanMap = booleanMap;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return passengerId;
    case 1: return age;
    case 2: return gender;
    case 3: return height;
    case 4: return weight;
    case 5: return description;
    case 6: return survived;
    case 7: return boarded;
    case 8: return recordDate;
    case 9: return stringMap;
    case 10: return numericMap;
    case 11: return booleanMap;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: passengerId = (java.lang.Integer)value$; break;
    case 1: age = (java.lang.Integer)value$; break;
    case 2: gender = (java.lang.String)value$; break;
    case 3: height = (java.lang.Integer)value$; break;
    case 4: weight = (java.lang.Integer)value$; break;
    case 5: description = (java.lang.String)value$; break;
    case 6: survived = (java.lang.Integer)value$; break;
    case 7: boarded = (java.lang.Integer)value$; break;
    case 8: recordDate = (java.lang.Integer)value$; break;
    case 9: stringMap = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    case 10: numericMap = (java.util.Map<java.lang.String,java.lang.Double>)value$; break;
    case 11: booleanMap = (java.util.Map<java.lang.String,java.lang.Boolean>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'passengerId' field.
   */
  public java.lang.Integer getPassengerId() {
    return passengerId;
  }

  /**
   * Sets the value of the 'passengerId' field.
   * @param value the value to set.
   */
  public void setPassengerId(java.lang.Integer value) {
    this.passengerId = value;
  }

  /**
   * Gets the value of the 'age' field.
   */
  public java.lang.Integer getAge() {
    return age;
  }

  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(java.lang.Integer value) {
    this.age = value;
  }

  /**
   * Gets the value of the 'gender' field.
   */
  public java.lang.String getGender() {
    return gender;
  }

  /**
   * Sets the value of the 'gender' field.
   * @param value the value to set.
   */
  public void setGender(java.lang.String value) {
    this.gender = value;
  }

  /**
   * Gets the value of the 'height' field.
   */
  public java.lang.Integer getHeight() {
    return height;
  }

  /**
   * Sets the value of the 'height' field.
   * @param value the value to set.
   */
  public void setHeight(java.lang.Integer value) {
    this.height = value;
  }

  /**
   * Gets the value of the 'weight' field.
   */
  public java.lang.Integer getWeight() {
    return weight;
  }

  /**
   * Sets the value of the 'weight' field.
   * @param value the value to set.
   */
  public void setWeight(java.lang.Integer value) {
    this.weight = value;
  }

  /**
   * Gets the value of the 'description' field.
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'survived' field.
   */
  public java.lang.Integer getSurvived() {
    return survived;
  }

  /**
   * Sets the value of the 'survived' field.
   * @param value the value to set.
   */
  public void setSurvived(java.lang.Integer value) {
    this.survived = value;
  }

  /**
   * Gets the value of the 'boarded' field.
   */
  public java.lang.Integer getBoarded() {
    return boarded;
  }

  /**
   * Sets the value of the 'boarded' field.
   * @param value the value to set.
   */
  public void setBoarded(java.lang.Integer value) {
    this.boarded = value;
  }

  /**
   * Gets the value of the 'recordDate' field.
   */
  public java.lang.Integer getRecordDate() {
    return recordDate;
  }

  /**
   * Sets the value of the 'recordDate' field.
   * @param value the value to set.
   */
  public void setRecordDate(java.lang.Integer value) {
    this.recordDate = value;
  }

  /**
   * Gets the value of the 'stringMap' field.
   */
  public java.util.Map<java.lang.String,java.lang.String> getStringMap() {
    return stringMap;
  }

  /**
   * Sets the value of the 'stringMap' field.
   * @param value the value to set.
   */
  public void setStringMap(java.util.Map<java.lang.String,java.lang.String> value) {
    this.stringMap = value;
  }

  /**
   * Gets the value of the 'numericMap' field.
   */
  public java.util.Map<java.lang.String,java.lang.Double> getNumericMap() {
    return numericMap;
  }

  /**
   * Sets the value of the 'numericMap' field.
   * @param value the value to set.
   */
  public void setNumericMap(java.util.Map<java.lang.String,java.lang.Double> value) {
    this.numericMap = value;
  }

  /**
   * Gets the value of the 'booleanMap' field.
   */
  public java.util.Map<java.lang.String,java.lang.Boolean> getBooleanMap() {
    return booleanMap;
  }

  /**
   * Sets the value of the 'booleanMap' field.
   * @param value the value to set.
   */
  public void setBooleanMap(java.util.Map<java.lang.String,java.lang.Boolean> value) {
    this.booleanMap = value;
  }

  /** Creates a new Passenger RecordBuilder */
  public static com.salesforce.op.test.Passenger.Builder newBuilder() {
    return new com.salesforce.op.test.Passenger.Builder();
  }
  
  /** Creates a new Passenger RecordBuilder by copying an existing Builder */
  public static com.salesforce.op.test.Passenger.Builder newBuilder(com.salesforce.op.test.Passenger.Builder other) {
    return new com.salesforce.op.test.Passenger.Builder(other);
  }
  
  /** Creates a new Passenger RecordBuilder by copying an existing Passenger instance */
  public static com.salesforce.op.test.Passenger.Builder newBuilder(com.salesforce.op.test.Passenger other) {
    return new com.salesforce.op.test.Passenger.Builder(other);
  }
  
  /**
   * RecordBuilder for Passenger instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Passenger>
    implements org.apache.avro.data.RecordBuilder<Passenger> {

    private java.lang.Integer passengerId;
    private java.lang.Integer age;
    private java.lang.String gender;
    private java.lang.Integer height;
    private java.lang.Integer weight;
    private java.lang.String description;
    private java.lang.Integer survived;
    private java.lang.Integer boarded;
    private java.lang.Integer recordDate;
    private java.util.Map<java.lang.String,java.lang.String> stringMap;
    private java.util.Map<java.lang.String,java.lang.Double> numericMap;
    private java.util.Map<java.lang.String,java.lang.Boolean> booleanMap;

    /** Creates a new Builder */
    private Builder() {
      super(com.salesforce.op.test.Passenger.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.salesforce.op.test.Passenger.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.passengerId)) {
        this.passengerId = data().deepCopy(fields()[0].schema(), other.passengerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.age)) {
        this.age = data().deepCopy(fields()[1].schema(), other.age);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.gender)) {
        this.gender = data().deepCopy(fields()[2].schema(), other.gender);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.height)) {
        this.height = data().deepCopy(fields()[3].schema(), other.height);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.weight)) {
        this.weight = data().deepCopy(fields()[4].schema(), other.weight);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.description)) {
        this.description = data().deepCopy(fields()[5].schema(), other.description);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.survived)) {
        this.survived = data().deepCopy(fields()[6].schema(), other.survived);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.boarded)) {
        this.boarded = data().deepCopy(fields()[7].schema(), other.boarded);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.recordDate)) {
        this.recordDate = data().deepCopy(fields()[8].schema(), other.recordDate);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.stringMap)) {
        this.stringMap = data().deepCopy(fields()[9].schema(), other.stringMap);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.numericMap)) {
        this.numericMap = data().deepCopy(fields()[10].schema(), other.numericMap);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.booleanMap)) {
        this.booleanMap = data().deepCopy(fields()[11].schema(), other.booleanMap);
        fieldSetFlags()[11] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Passenger instance */
    private Builder(com.salesforce.op.test.Passenger other) {
            super(com.salesforce.op.test.Passenger.SCHEMA$);
      if (isValidValue(fields()[0], other.passengerId)) {
        this.passengerId = data().deepCopy(fields()[0].schema(), other.passengerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.age)) {
        this.age = data().deepCopy(fields()[1].schema(), other.age);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.gender)) {
        this.gender = data().deepCopy(fields()[2].schema(), other.gender);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.height)) {
        this.height = data().deepCopy(fields()[3].schema(), other.height);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.weight)) {
        this.weight = data().deepCopy(fields()[4].schema(), other.weight);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.description)) {
        this.description = data().deepCopy(fields()[5].schema(), other.description);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.survived)) {
        this.survived = data().deepCopy(fields()[6].schema(), other.survived);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.boarded)) {
        this.boarded = data().deepCopy(fields()[7].schema(), other.boarded);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.recordDate)) {
        this.recordDate = data().deepCopy(fields()[8].schema(), other.recordDate);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.stringMap)) {
        this.stringMap = data().deepCopy(fields()[9].schema(), other.stringMap);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.numericMap)) {
        this.numericMap = data().deepCopy(fields()[10].schema(), other.numericMap);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.booleanMap)) {
        this.booleanMap = data().deepCopy(fields()[11].schema(), other.booleanMap);
        fieldSetFlags()[11] = true;
      }
    }

    /** Gets the value of the 'passengerId' field */
    public java.lang.Integer getPassengerId() {
      return passengerId;
    }
    
    /** Sets the value of the 'passengerId' field */
    public com.salesforce.op.test.Passenger.Builder setPassengerId(java.lang.Integer value) {
      validate(fields()[0], value);
      this.passengerId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'passengerId' field has been set */
    public boolean hasPassengerId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'passengerId' field */
    public com.salesforce.op.test.Passenger.Builder clearPassengerId() {
      passengerId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'age' field */
    public java.lang.Integer getAge() {
      return age;
    }
    
    /** Sets the value of the 'age' field */
    public com.salesforce.op.test.Passenger.Builder setAge(java.lang.Integer value) {
      validate(fields()[1], value);
      this.age = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'age' field has been set */
    public boolean hasAge() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'age' field */
    public com.salesforce.op.test.Passenger.Builder clearAge() {
      age = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'gender' field */
    public java.lang.String getGender() {
      return gender;
    }
    
    /** Sets the value of the 'gender' field */
    public com.salesforce.op.test.Passenger.Builder setGender(java.lang.String value) {
      validate(fields()[2], value);
      this.gender = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'gender' field has been set */
    public boolean hasGender() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'gender' field */
    public com.salesforce.op.test.Passenger.Builder clearGender() {
      gender = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'height' field */
    public java.lang.Integer getHeight() {
      return height;
    }
    
    /** Sets the value of the 'height' field */
    public com.salesforce.op.test.Passenger.Builder setHeight(java.lang.Integer value) {
      validate(fields()[3], value);
      this.height = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'height' field has been set */
    public boolean hasHeight() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'height' field */
    public com.salesforce.op.test.Passenger.Builder clearHeight() {
      height = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'weight' field */
    public java.lang.Integer getWeight() {
      return weight;
    }
    
    /** Sets the value of the 'weight' field */
    public com.salesforce.op.test.Passenger.Builder setWeight(java.lang.Integer value) {
      validate(fields()[4], value);
      this.weight = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'weight' field has been set */
    public boolean hasWeight() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'weight' field */
    public com.salesforce.op.test.Passenger.Builder clearWeight() {
      weight = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'description' field */
    public java.lang.String getDescription() {
      return description;
    }
    
    /** Sets the value of the 'description' field */
    public com.salesforce.op.test.Passenger.Builder setDescription(java.lang.String value) {
      validate(fields()[5], value);
      this.description = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'description' field has been set */
    public boolean hasDescription() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'description' field */
    public com.salesforce.op.test.Passenger.Builder clearDescription() {
      description = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'survived' field */
    public java.lang.Integer getSurvived() {
      return survived;
    }
    
    /** Sets the value of the 'survived' field */
    public com.salesforce.op.test.Passenger.Builder setSurvived(java.lang.Integer value) {
      validate(fields()[6], value);
      this.survived = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'survived' field has been set */
    public boolean hasSurvived() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'survived' field */
    public com.salesforce.op.test.Passenger.Builder clearSurvived() {
      survived = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'boarded' field */
    public java.lang.Integer getBoarded() {
      return boarded;
    }
    
    /** Sets the value of the 'boarded' field */
    public com.salesforce.op.test.Passenger.Builder setBoarded(java.lang.Integer value) {
      validate(fields()[7], value);
      this.boarded = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'boarded' field has been set */
    public boolean hasBoarded() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'boarded' field */
    public com.salesforce.op.test.Passenger.Builder clearBoarded() {
      boarded = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'recordDate' field */
    public java.lang.Integer getRecordDate() {
      return recordDate;
    }
    
    /** Sets the value of the 'recordDate' field */
    public com.salesforce.op.test.Passenger.Builder setRecordDate(java.lang.Integer value) {
      validate(fields()[8], value);
      this.recordDate = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'recordDate' field has been set */
    public boolean hasRecordDate() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'recordDate' field */
    public com.salesforce.op.test.Passenger.Builder clearRecordDate() {
      recordDate = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'stringMap' field */
    public java.util.Map<java.lang.String,java.lang.String> getStringMap() {
      return stringMap;
    }
    
    /** Sets the value of the 'stringMap' field */
    public com.salesforce.op.test.Passenger.Builder setStringMap(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[9], value);
      this.stringMap = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'stringMap' field has been set */
    public boolean hasStringMap() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'stringMap' field */
    public com.salesforce.op.test.Passenger.Builder clearStringMap() {
      stringMap = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'numericMap' field */
    public java.util.Map<java.lang.String,java.lang.Double> getNumericMap() {
      return numericMap;
    }
    
    /** Sets the value of the 'numericMap' field */
    public com.salesforce.op.test.Passenger.Builder setNumericMap(java.util.Map<java.lang.String,java.lang.Double> value) {
      validate(fields()[10], value);
      this.numericMap = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'numericMap' field has been set */
    public boolean hasNumericMap() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'numericMap' field */
    public com.salesforce.op.test.Passenger.Builder clearNumericMap() {
      numericMap = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'booleanMap' field */
    public java.util.Map<java.lang.String,java.lang.Boolean> getBooleanMap() {
      return booleanMap;
    }
    
    /** Sets the value of the 'booleanMap' field */
    public com.salesforce.op.test.Passenger.Builder setBooleanMap(java.util.Map<java.lang.String,java.lang.Boolean> value) {
      validate(fields()[11], value);
      this.booleanMap = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'booleanMap' field has been set */
    public boolean hasBooleanMap() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'booleanMap' field */
    public com.salesforce.op.test.Passenger.Builder clearBooleanMap() {
      booleanMap = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    public Passenger build() {
      try {
        Passenger record = new Passenger();
        record.passengerId = fieldSetFlags()[0] ? this.passengerId : (java.lang.Integer) defaultValue(fields()[0]);
        record.age = fieldSetFlags()[1] ? this.age : (java.lang.Integer) defaultValue(fields()[1]);
        record.gender = fieldSetFlags()[2] ? this.gender : (java.lang.String) defaultValue(fields()[2]);
        record.height = fieldSetFlags()[3] ? this.height : (java.lang.Integer) defaultValue(fields()[3]);
        record.weight = fieldSetFlags()[4] ? this.weight : (java.lang.Integer) defaultValue(fields()[4]);
        record.description = fieldSetFlags()[5] ? this.description : (java.lang.String) defaultValue(fields()[5]);
        record.survived = fieldSetFlags()[6] ? this.survived : (java.lang.Integer) defaultValue(fields()[6]);
        record.boarded = fieldSetFlags()[7] ? this.boarded : (java.lang.Integer) defaultValue(fields()[7]);
        record.recordDate = fieldSetFlags()[8] ? this.recordDate : (java.lang.Integer) defaultValue(fields()[8]);
        record.stringMap = fieldSetFlags()[9] ? this.stringMap : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[9]);
        record.numericMap = fieldSetFlags()[10] ? this.numericMap : (java.util.Map<java.lang.String,java.lang.Double>) defaultValue(fields()[10]);
        record.booleanMap = fieldSetFlags()[11] ? this.booleanMap : (java.util.Map<java.lang.String,java.lang.Boolean>) defaultValue(fields()[11]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
