/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.salesforce.op.test;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SparkExampleJoin extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SparkExampleJoin\",\"namespace\":\"com.salesforce.op.test\",\"fields\":[{\"name\":\"id\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"timestamp\",\"type\":[\"long\",\"null\"]},{\"name\":\"description\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"gender\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String id;
  @Deprecated public java.lang.Long timestamp;
  @Deprecated public java.lang.String description;
  @Deprecated public java.lang.String gender;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public SparkExampleJoin() {}

  /**
   * All-args constructor.
   */
  public SparkExampleJoin(java.lang.String id, java.lang.Long timestamp, java.lang.String description, java.lang.String gender) {
    this.id = id;
    this.timestamp = timestamp;
    this.description = description;
    this.gender = gender;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return timestamp;
    case 2: return description;
    case 3: return gender;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.String)value$; break;
    case 1: timestamp = (java.lang.Long)value$; break;
    case 2: description = (java.lang.String)value$; break;
    case 3: gender = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'description' field.
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'gender' field.
   */
  public java.lang.String getGender() {
    return gender;
  }

  /**
   * Sets the value of the 'gender' field.
   * @param value the value to set.
   */
  public void setGender(java.lang.String value) {
    this.gender = value;
  }

  /** Creates a new SparkExampleJoin RecordBuilder */
  public static com.salesforce.op.test.SparkExampleJoin.Builder newBuilder() {
    return new com.salesforce.op.test.SparkExampleJoin.Builder();
  }
  
  /** Creates a new SparkExampleJoin RecordBuilder by copying an existing Builder */
  public static com.salesforce.op.test.SparkExampleJoin.Builder newBuilder(com.salesforce.op.test.SparkExampleJoin.Builder other) {
    return new com.salesforce.op.test.SparkExampleJoin.Builder(other);
  }
  
  /** Creates a new SparkExampleJoin RecordBuilder by copying an existing SparkExampleJoin instance */
  public static com.salesforce.op.test.SparkExampleJoin.Builder newBuilder(com.salesforce.op.test.SparkExampleJoin other) {
    return new com.salesforce.op.test.SparkExampleJoin.Builder(other);
  }
  
  /**
   * RecordBuilder for SparkExampleJoin instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SparkExampleJoin>
    implements org.apache.avro.data.RecordBuilder<SparkExampleJoin> {

    private java.lang.String id;
    private java.lang.Long timestamp;
    private java.lang.String description;
    private java.lang.String gender;

    /** Creates a new Builder */
    private Builder() {
      super(com.salesforce.op.test.SparkExampleJoin.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.salesforce.op.test.SparkExampleJoin.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.gender)) {
        this.gender = data().deepCopy(fields()[3].schema(), other.gender);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing SparkExampleJoin instance */
    private Builder(com.salesforce.op.test.SparkExampleJoin other) {
            super(com.salesforce.op.test.SparkExampleJoin.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.gender)) {
        this.gender = data().deepCopy(fields()[3].schema(), other.gender);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.String getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public com.salesforce.op.test.SparkExampleJoin.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public com.salesforce.op.test.SparkExampleJoin.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'timestamp' field */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }
    
    /** Sets the value of the 'timestamp' field */
    public com.salesforce.op.test.SparkExampleJoin.Builder setTimestamp(java.lang.Long value) {
      validate(fields()[1], value);
      this.timestamp = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'timestamp' field has been set */
    public boolean hasTimestamp() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'timestamp' field */
    public com.salesforce.op.test.SparkExampleJoin.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'description' field */
    public java.lang.String getDescription() {
      return description;
    }
    
    /** Sets the value of the 'description' field */
    public com.salesforce.op.test.SparkExampleJoin.Builder setDescription(java.lang.String value) {
      validate(fields()[2], value);
      this.description = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'description' field has been set */
    public boolean hasDescription() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'description' field */
    public com.salesforce.op.test.SparkExampleJoin.Builder clearDescription() {
      description = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'gender' field */
    public java.lang.String getGender() {
      return gender;
    }
    
    /** Sets the value of the 'gender' field */
    public com.salesforce.op.test.SparkExampleJoin.Builder setGender(java.lang.String value) {
      validate(fields()[3], value);
      this.gender = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'gender' field has been set */
    public boolean hasGender() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'gender' field */
    public com.salesforce.op.test.SparkExampleJoin.Builder clearGender() {
      gender = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public SparkExampleJoin build() {
      try {
        SparkExampleJoin record = new SparkExampleJoin();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.lang.Long) defaultValue(fields()[1]);
        record.description = fieldSetFlags()[2] ? this.description : (java.lang.String) defaultValue(fields()[2]);
        record.gender = fieldSetFlags()[3] ? this.gender : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
