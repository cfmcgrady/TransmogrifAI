/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.salesforce.op.test;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PassengerProfile extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PassengerProfile\",\"namespace\":\"com.salesforce.op.test\",\"fields\":[{\"name\":\"passengerId\",\"type\":[\"int\",\"null\"]},{\"name\":\"state\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Integer passengerId;
  @Deprecated public java.lang.String state;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public PassengerProfile() {}

  /**
   * All-args constructor.
   */
  public PassengerProfile(java.lang.Integer passengerId, java.lang.String state) {
    this.passengerId = passengerId;
    this.state = state;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return passengerId;
    case 1: return state;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: passengerId = (java.lang.Integer)value$; break;
    case 1: state = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'passengerId' field.
   */
  public java.lang.Integer getPassengerId() {
    return passengerId;
  }

  /**
   * Sets the value of the 'passengerId' field.
   * @param value the value to set.
   */
  public void setPassengerId(java.lang.Integer value) {
    this.passengerId = value;
  }

  /**
   * Gets the value of the 'state' field.
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(java.lang.String value) {
    this.state = value;
  }

  /** Creates a new PassengerProfile RecordBuilder */
  public static com.salesforce.op.test.PassengerProfile.Builder newBuilder() {
    return new com.salesforce.op.test.PassengerProfile.Builder();
  }
  
  /** Creates a new PassengerProfile RecordBuilder by copying an existing Builder */
  public static com.salesforce.op.test.PassengerProfile.Builder newBuilder(com.salesforce.op.test.PassengerProfile.Builder other) {
    return new com.salesforce.op.test.PassengerProfile.Builder(other);
  }
  
  /** Creates a new PassengerProfile RecordBuilder by copying an existing PassengerProfile instance */
  public static com.salesforce.op.test.PassengerProfile.Builder newBuilder(com.salesforce.op.test.PassengerProfile other) {
    return new com.salesforce.op.test.PassengerProfile.Builder(other);
  }
  
  /**
   * RecordBuilder for PassengerProfile instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PassengerProfile>
    implements org.apache.avro.data.RecordBuilder<PassengerProfile> {

    private java.lang.Integer passengerId;
    private java.lang.String state;

    /** Creates a new Builder */
    private Builder() {
      super(com.salesforce.op.test.PassengerProfile.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.salesforce.op.test.PassengerProfile.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.passengerId)) {
        this.passengerId = data().deepCopy(fields()[0].schema(), other.passengerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.state)) {
        this.state = data().deepCopy(fields()[1].schema(), other.state);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing PassengerProfile instance */
    private Builder(com.salesforce.op.test.PassengerProfile other) {
            super(com.salesforce.op.test.PassengerProfile.SCHEMA$);
      if (isValidValue(fields()[0], other.passengerId)) {
        this.passengerId = data().deepCopy(fields()[0].schema(), other.passengerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.state)) {
        this.state = data().deepCopy(fields()[1].schema(), other.state);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'passengerId' field */
    public java.lang.Integer getPassengerId() {
      return passengerId;
    }
    
    /** Sets the value of the 'passengerId' field */
    public com.salesforce.op.test.PassengerProfile.Builder setPassengerId(java.lang.Integer value) {
      validate(fields()[0], value);
      this.passengerId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'passengerId' field has been set */
    public boolean hasPassengerId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'passengerId' field */
    public com.salesforce.op.test.PassengerProfile.Builder clearPassengerId() {
      passengerId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'state' field */
    public java.lang.String getState() {
      return state;
    }
    
    /** Sets the value of the 'state' field */
    public com.salesforce.op.test.PassengerProfile.Builder setState(java.lang.String value) {
      validate(fields()[1], value);
      this.state = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'state' field has been set */
    public boolean hasState() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'state' field */
    public com.salesforce.op.test.PassengerProfile.Builder clearState() {
      state = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public PassengerProfile build() {
      try {
        PassengerProfile record = new PassengerProfile();
        record.passengerId = fieldSetFlags()[0] ? this.passengerId : (java.lang.Integer) defaultValue(fields()[0]);
        record.state = fieldSetFlags()[1] ? this.state : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
